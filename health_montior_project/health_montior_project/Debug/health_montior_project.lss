
health_montior_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000008e0  00000954  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000998  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014a1  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a01  00000000  00000000  00001f85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af9  00000000  00000000  00002986  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00003480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000496  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b1e  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000045f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  7a:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <i2c_int>:
unsigned char i2c_recieve_pec(){
	TWCR|=(1<<TWEN)|(1<<TWINT);
	while(get_bit_(TWCR,TWINT)==0);
	while((TWSR&0xf8)!=0x58);
	return TWDR;
}
  82:	10 b8       	out	0x00, r1	; 0
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 b9       	out	0x00, r24	; 0
  88:	08 95       	ret

0000008a <i2c_start_condition>:
  8a:	86 b7       	in	r24, 0x36	; 54
  8c:	84 6a       	ori	r24, 0xA4	; 164
  8e:	86 bf       	out	0x36, r24	; 54
  90:	06 b6       	in	r0, 0x36	; 54
  92:	07 fe       	sbrs	r0, 7
  94:	fd cf       	rjmp	.-6      	; 0x90 <i2c_start_condition+0x6>
  96:	81 b1       	in	r24, 0x01	; 1
  98:	88 7f       	andi	r24, 0xF8	; 248
  9a:	88 30       	cpi	r24, 0x08	; 8
  9c:	e1 f7       	brne	.-8      	; 0x96 <i2c_start_condition+0xc>
  9e:	08 95       	ret

000000a0 <i2c_send_address_W>:
  a0:	83 b9       	out	0x03, r24	; 3
  a2:	86 b7       	in	r24, 0x36	; 54
  a4:	84 68       	ori	r24, 0x84	; 132
  a6:	86 bf       	out	0x36, r24	; 54
  a8:	06 b6       	in	r0, 0x36	; 54
  aa:	07 fe       	sbrs	r0, 7
  ac:	fd cf       	rjmp	.-6      	; 0xa8 <i2c_send_address_W+0x8>
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	88 7f       	andi	r24, 0xF8	; 248
  b2:	88 31       	cpi	r24, 0x18	; 24
  b4:	e1 f7       	brne	.-8      	; 0xae <i2c_send_address_W+0xe>
  b6:	08 95       	ret

000000b8 <i2c_send_data>:
  b8:	83 b9       	out	0x03, r24	; 3
  ba:	86 b7       	in	r24, 0x36	; 54
  bc:	84 68       	ori	r24, 0x84	; 132
  be:	86 bf       	out	0x36, r24	; 54
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <i2c_send_data+0x8>
  c6:	81 b1       	in	r24, 0x01	; 1
  c8:	88 7f       	andi	r24, 0xF8	; 248
  ca:	88 32       	cpi	r24, 0x28	; 40
  cc:	e1 f7       	brne	.-8      	; 0xc6 <i2c_send_data+0xe>
  ce:	08 95       	ret

000000d0 <i2c_repeat_start>:
  d0:	86 b7       	in	r24, 0x36	; 54
  d2:	84 6a       	ori	r24, 0xA4	; 164
  d4:	86 bf       	out	0x36, r24	; 54
  d6:	06 b6       	in	r0, 0x36	; 54
  d8:	07 fe       	sbrs	r0, 7
  da:	fd cf       	rjmp	.-6      	; 0xd6 <i2c_repeat_start+0x6>
  dc:	81 b1       	in	r24, 0x01	; 1
  de:	88 7f       	andi	r24, 0xF8	; 248
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	e1 f7       	brne	.-8      	; 0xdc <i2c_repeat_start+0xc>
  e4:	08 95       	ret

000000e6 <i2c_send_address_R>:
  e6:	83 b9       	out	0x03, r24	; 3
  e8:	86 b7       	in	r24, 0x36	; 54
  ea:	84 68       	ori	r24, 0x84	; 132
  ec:	86 bf       	out	0x36, r24	; 54
  ee:	06 b6       	in	r0, 0x36	; 54
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <i2c_send_address_R+0x8>
  f4:	81 b1       	in	r24, 0x01	; 1
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	80 34       	cpi	r24, 0x40	; 64
  fa:	e1 f7       	brne	.-8      	; 0xf4 <i2c_send_address_R+0xe>
  fc:	08 95       	ret

000000fe <i2c_recieve_Data>:
  fe:	86 b7       	in	r24, 0x36	; 54
 100:	84 68       	ori	r24, 0x84	; 132
 102:	86 bf       	out	0x36, r24	; 54
 104:	06 b6       	in	r0, 0x36	; 54
 106:	07 fe       	sbrs	r0, 7
 108:	fd cf       	rjmp	.-6      	; 0x104 <i2c_recieve_Data+0x6>
 10a:	81 b1       	in	r24, 0x01	; 1
 10c:	88 7f       	andi	r24, 0xF8	; 248
 10e:	80 35       	cpi	r24, 0x50	; 80
 110:	e1 f7       	brne	.-8      	; 0x10a <i2c_recieve_Data+0xc>
 112:	83 b1       	in	r24, 0x03	; 3
 114:	08 95       	ret

00000116 <i2c_stop_condition>:
void i2c_stop_condition(){
	TWCR|=(1<<TWEN)|(1<<TWSTO)|(1<<TWINT);
 116:	86 b7       	in	r24, 0x36	; 54
 118:	84 69       	ori	r24, 0x94	; 148
 11a:	86 bf       	out	0x36, r24	; 54
 11c:	08 95       	ret

0000011e <lcd_command_>:
#define F_CPU 16000000
#include "lcd_.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_command_(char cmd){
	PORTA=(PORTA & 0x0F)|(cmd & 0xF0);
 11e:	9b b3       	in	r25, 0x1b	; 27
 120:	9f 70       	andi	r25, 0x0F	; 15
 122:	28 2f       	mov	r18, r24
 124:	20 7f       	andi	r18, 0xF0	; 240
 126:	92 2b       	or	r25, r18
 128:	9b bb       	out	0x1b, r25	; 27
	clear_bit_(PORTB,RS);
 12a:	c1 98       	cbi	0x18, 1	; 24
	set_bit_(PORTB,EN);
 12c:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12e:	ef e3       	ldi	r30, 0x3F	; 63
 130:	ff e1       	ldi	r31, 0x1F	; 31
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_command_+0x14>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_command_+0x1a>
 138:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
 13a:	c3 98       	cbi	0x18, 3	; 24
 13c:	ef ed       	ldi	r30, 0xDF	; 223
 13e:	fe e2       	ldi	r31, 0x2E	; 46
 140:	31 97       	sbiw	r30, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <lcd_command_+0x22>
 144:	00 c0       	rjmp	.+0      	; 0x146 <lcd_command_+0x28>
 146:	00 00       	nop
	_delay_ms(3);
	PORTA=(PORTA & 0x0F)|(cmd << 4);
 148:	2b b3       	in	r18, 0x1b	; 27
 14a:	2f 70       	andi	r18, 0x0F	; 15
 14c:	f0 e1       	ldi	r31, 0x10	; 16
 14e:	8f 9f       	mul	r24, r31
 150:	c0 01       	movw	r24, r0
 152:	11 24       	eor	r1, r1
 154:	82 2b       	or	r24, r18
 156:	8b bb       	out	0x1b, r24	; 27
	set_bit_(PORTB,EN);
 158:	c3 9a       	sbi	0x18, 3	; 24
 15a:	8f e3       	ldi	r24, 0x3F	; 63
 15c:	9f e1       	ldi	r25, 0x1F	; 31
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_command_+0x40>
 162:	00 c0       	rjmp	.+0      	; 0x164 <lcd_command_+0x46>
 164:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
 166:	c3 98       	cbi	0x18, 3	; 24
 168:	ef ed       	ldi	r30, 0xDF	; 223
 16a:	fe e2       	ldi	r31, 0x2E	; 46
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_command_+0x4e>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_command_+0x54>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <lcd_char_>:
	_delay_ms(3);
}
void lcd_char_(char data){
	PORTA=(PORTA & 0x0F)|(data & 0xF0);
 176:	9b b3       	in	r25, 0x1b	; 27
 178:	9f 70       	andi	r25, 0x0F	; 15
 17a:	28 2f       	mov	r18, r24
 17c:	20 7f       	andi	r18, 0xF0	; 240
 17e:	92 2b       	or	r25, r18
 180:	9b bb       	out	0x1b, r25	; 27
	set_bit_(PORTB,RS);
 182:	c1 9a       	sbi	0x18, 1	; 24
	set_bit_(PORTB,EN);
 184:	c3 9a       	sbi	0x18, 3	; 24
 186:	ef e3       	ldi	r30, 0x3F	; 63
 188:	ff e1       	ldi	r31, 0x1F	; 31
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_char_+0x14>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <lcd_char_+0x1a>
 190:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
 192:	c3 98       	cbi	0x18, 3	; 24
 194:	ef ed       	ldi	r30, 0xDF	; 223
 196:	fe e2       	ldi	r31, 0x2E	; 46
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_char_+0x22>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <lcd_char_+0x28>
 19e:	00 00       	nop
	_delay_ms(3);
	PORTA=(PORTA & 0x0F)|(data << 4);
 1a0:	2b b3       	in	r18, 0x1b	; 27
 1a2:	2f 70       	andi	r18, 0x0F	; 15
 1a4:	f0 e1       	ldi	r31, 0x10	; 16
 1a6:	8f 9f       	mul	r24, r31
 1a8:	c0 01       	movw	r24, r0
 1aa:	11 24       	eor	r1, r1
 1ac:	82 2b       	or	r24, r18
 1ae:	8b bb       	out	0x1b, r24	; 27
	set_bit_(PORTB,EN);
 1b0:	c3 9a       	sbi	0x18, 3	; 24
 1b2:	8f e3       	ldi	r24, 0x3F	; 63
 1b4:	9f e1       	ldi	r25, 0x1F	; 31
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_char_+0x40>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_char_+0x46>
 1bc:	00 00       	nop
	_delay_ms(2);
	clear_bit_(PORTB,EN);
 1be:	c3 98       	cbi	0x18, 3	; 24
 1c0:	ef ed       	ldi	r30, 0xDF	; 223
 1c2:	fe e2       	ldi	r31, 0x2E	; 46
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_char_+0x4e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_char_+0x54>
 1ca:	00 00       	nop
 1cc:	08 95       	ret

000001ce <lcd_string_>:
	_delay_ms(3);
}
void lcd_string_(char *str){
 1ce:	cf 93       	push	r28
 1d0:	df 93       	push	r29
 1d2:	ec 01       	movw	r28, r24
	while( *str != '\0'){
 1d4:	88 81       	ld	r24, Y
 1d6:	88 23       	and	r24, r24
 1d8:	31 f0       	breq	.+12     	; 0x1e6 <lcd_string_+0x18>
 1da:	21 96       	adiw	r28, 0x01	; 1
		
		lcd_char_(*str);
 1dc:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
	_delay_ms(2);
	clear_bit_(PORTB,EN);
	_delay_ms(3);
}
void lcd_string_(char *str){
	while( *str != '\0'){
 1e0:	89 91       	ld	r24, Y+
 1e2:	81 11       	cpse	r24, r1
 1e4:	fb cf       	rjmp	.-10     	; 0x1dc <lcd_string_+0xe>
		
		lcd_char_(*str);
		str++;
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <lcd_clear>:
void lcd_clear(){
	lcd_command_(0x01);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
 1f2:	8f e3       	ldi	r24, 0x3F	; 63
 1f4:	9f e1       	ldi	r25, 0x1F	; 31
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_clear+0xa>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <lcd_clear+0x10>
 1fc:	00 00       	nop
	_delay_ms(2);
	lcd_command_(0x80);
 1fe:	80 e8       	ldi	r24, 0x80	; 128
 200:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
 204:	08 95       	ret

00000206 <lcd_int_>:
#include "lcd_config.h"
#include "lcd_.h"
#include <util/delay.h>
#include <avr/io.h>
void lcd_int_(){
	DDRA=0xff;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	8a bb       	out	0x1a, r24	; 26
	DDRB=0xff;
 20a:	87 bb       	out	0x17, r24	; 23
	clear_bit_(PORTB,RW);
 20c:	c2 98       	cbi	0x18, 2	; 24
 20e:	8f ef       	ldi	r24, 0xFF	; 255
 210:	9c e7       	ldi	r25, 0x7C	; 124
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <lcd_int_+0xc>
 216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_int_+0x12>
 218:	00 00       	nop
	_delay_ms(8);
	lcd_command_(0x33);
 21a:	83 e3       	ldi	r24, 0x33	; 51
 21c:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_command_(0x32);
 220:	82 e3       	ldi	r24, 0x32	; 50
 222:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_command_(0x28);
 226:	88 e2       	ldi	r24, 0x28	; 40
 228:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_command_(0x0c);
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_command_(0x06);
 232:	86 e0       	ldi	r24, 0x06	; 6
 234:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_command_(0x01);
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
 23e:	08 95       	ret

00000240 <convert>:
#include <util/delay.h>
#include "mlx90614.h"
#include "lcd_.h"
#include "lcd_config.h"
#include "i2c.h"
void convert(unsigned int data){
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ec 01       	movw	r28, r24
		lcd_char_( (data/10000)+0x30 );
 246:	9c 01       	movw	r18, r24
 248:	32 95       	swap	r19
 24a:	22 95       	swap	r18
 24c:	2f 70       	andi	r18, 0x0F	; 15
 24e:	23 27       	eor	r18, r19
 250:	3f 70       	andi	r19, 0x0F	; 15
 252:	23 27       	eor	r18, r19
 254:	a7 e4       	ldi	r26, 0x47	; 71
 256:	b3 e0       	ldi	r27, 0x03	; 3
 258:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
		lcd_char_( ((data/1000)%10)+0x30 );
 26e:	9e 01       	movw	r18, r28
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	36 95       	lsr	r19
 27a:	27 95       	ror	r18
 27c:	a5 ec       	ldi	r26, 0xC5	; 197
 27e:	b0 e2       	ldi	r27, 0x20	; 32
 280:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 284:	ac 01       	movw	r20, r24
 286:	52 95       	swap	r21
 288:	42 95       	swap	r20
 28a:	4f 70       	andi	r20, 0x0F	; 15
 28c:	45 27       	eor	r20, r21
 28e:	5f 70       	andi	r21, 0x0F	; 15
 290:	45 27       	eor	r20, r21
 292:	9a 01       	movw	r18, r20
 294:	ad ec       	ldi	r26, 0xCD	; 205
 296:	bc ec       	ldi	r27, 0xCC	; 204
 298:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	96 95       	lsr	r25
 2a6:	87 95       	ror	r24
 2a8:	9c 01       	movw	r18, r24
 2aa:	22 0f       	add	r18, r18
 2ac:	33 1f       	adc	r19, r19
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	82 0f       	add	r24, r18
 2bc:	93 1f       	adc	r25, r19
 2be:	9a 01       	movw	r18, r20
 2c0:	28 1b       	sub	r18, r24
 2c2:	39 0b       	sbc	r19, r25
 2c4:	c9 01       	movw	r24, r18
 2c6:	80 5d       	subi	r24, 0xD0	; 208
 2c8:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
		lcd_char_( ((data/100)%10)+0x30 );
 2cc:	9e 01       	movw	r18, r28
 2ce:	36 95       	lsr	r19
 2d0:	27 95       	ror	r18
 2d2:	36 95       	lsr	r19
 2d4:	27 95       	ror	r18
 2d6:	ab e7       	ldi	r26, 0x7B	; 123
 2d8:	b4 e1       	ldi	r27, 0x14	; 20
 2da:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 2de:	ac 01       	movw	r20, r24
 2e0:	56 95       	lsr	r21
 2e2:	47 95       	ror	r20
 2e4:	9a 01       	movw	r18, r20
 2e6:	ad ec       	ldi	r26, 0xCD	; 205
 2e8:	bc ec       	ldi	r27, 0xCC	; 204
 2ea:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	9c 01       	movw	r18, r24
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	82 0f       	add	r24, r18
 30e:	93 1f       	adc	r25, r19
 310:	9a 01       	movw	r18, r20
 312:	28 1b       	sub	r18, r24
 314:	39 0b       	sbc	r19, r25
 316:	c9 01       	movw	r24, r18
 318:	80 5d       	subi	r24, 0xD0	; 208
 31a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
		lcd_char_('.');
 31e:	8e e2       	ldi	r24, 0x2E	; 46
 320:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
		lcd_char_( ((data/10)%10)+0x30 );
 324:	9e 01       	movw	r18, r28
 326:	ad ec       	ldi	r26, 0xCD	; 205
 328:	bc ec       	ldi	r27, 0xCC	; 204
 32a:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 32e:	ac 01       	movw	r20, r24
 330:	56 95       	lsr	r21
 332:	47 95       	ror	r20
 334:	56 95       	lsr	r21
 336:	47 95       	ror	r20
 338:	56 95       	lsr	r21
 33a:	47 95       	ror	r20
 33c:	9a 01       	movw	r18, r20
 33e:	0e 94 5f 04 	call	0x8be	; 0x8be <__umulhisi3>
 342:	96 95       	lsr	r25
 344:	87 95       	ror	r24
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	96 95       	lsr	r25
 34c:	87 95       	ror	r24
 34e:	9c 01       	movw	r18, r24
 350:	22 0f       	add	r18, r18
 352:	33 1f       	adc	r19, r19
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	82 0f       	add	r24, r18
 362:	93 1f       	adc	r25, r19
 364:	9a 01       	movw	r18, r20
 366:	28 1b       	sub	r18, r24
 368:	39 0b       	sbc	r19, r25
 36a:	c9 01       	movw	r24, r18
 36c:	80 5d       	subi	r24, 0xD0	; 208
 36e:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_char_>
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <main>:
int main(void)
{
	i2c_int();
 378:	0e 94 41 00 	call	0x82	; 0x82 <i2c_int>
	DDRC|=(1<<2);
 37c:	a2 9a       	sbi	0x14, 2	; 20
	DDRC|=(1<<0);
 37e:	a0 9a       	sbi	0x14, 0	; 20
	DDRC|=(1<<1);
 380:	a1 9a       	sbi	0x14, 1	; 20
	double temp;
    lcd_int_();
 382:	0e 94 03 01 	call	0x206	; 0x206 <lcd_int_>
	MLX90614_Init(0x48);
 386:	88 e4       	ldi	r24, 0x48	; 72
 388:	0e 94 22 02 	call	0x444	; 0x444 <MLX90614_Init>
 38c:	8f e3       	ldi	r24, 0x3F	; 63
 38e:	9c e9       	ldi	r25, 0x9C	; 156
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <main+0x18>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x1e>
 396:	00 00       	nop
	_delay_ms(10);
	lcd_command_(0x80);
 398:	80 e8       	ldi	r24, 0x80	; 128
 39a:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
	lcd_string_("hello");
 39e:	80 e6       	ldi	r24, 0x60	; 96
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_string_>
 3a6:	9f ef       	ldi	r25, 0xFF	; 255
 3a8:	23 ed       	ldi	r18, 0xD3	; 211
 3aa:	30 e3       	ldi	r19, 0x30	; 48
 3ac:	91 50       	subi	r25, 0x01	; 1
 3ae:	20 40       	sbci	r18, 0x00	; 0
 3b0:	30 40       	sbci	r19, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x34>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x3e>
 3b6:	00 00       	nop
	_delay_ms(1000);
	lcd_clear();
 3b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <lcd_clear>
	mlx90614_write(0x5A,0x07);
 3bc:	67 e0       	ldi	r22, 0x07	; 7
 3be:	8a e5       	ldi	r24, 0x5A	; 90
 3c0:	0e 94 25 02 	call	0x44a	; 0x44a <mlx90614_write>
    while (1) 
    {
		temp=mlx90614_read(0x5A,0x07);
		toggle_bit_(PORTC,2);
 3c4:	c4 e0       	ldi	r28, 0x04	; 4
	_delay_ms(1000);
	lcd_clear();
	mlx90614_write(0x5A,0x07);
    while (1) 
    {
		temp=mlx90614_read(0x5A,0x07);
 3c6:	67 e0       	ldi	r22, 0x07	; 7
 3c8:	8a e5       	ldi	r24, 0x5A	; 90
 3ca:	0e 94 6d 02 	call	0x4da	; 0x4da <mlx90614_read>
		toggle_bit_(PORTC,2);
 3ce:	25 b3       	in	r18, 0x15	; 21
 3d0:	2c 27       	eor	r18, r28
 3d2:	25 bb       	out	0x15, r18	; 21
 3d4:	4f ef       	ldi	r20, 0xFF	; 255
 3d6:	23 ec       	ldi	r18, 0xC3	; 195
 3d8:	39 e0       	ldi	r19, 0x09	; 9
 3da:	41 50       	subi	r20, 0x01	; 1
 3dc:	20 40       	sbci	r18, 0x00	; 0
 3de:	30 40       	sbci	r19, 0x00	; 0
 3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x62>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x6c>
 3e4:	00 00       	nop
 3e6:	4f ef       	ldi	r20, 0xFF	; 255
 3e8:	29 ef       	ldi	r18, 0xF9	; 249
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	41 50       	subi	r20, 0x01	; 1
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	30 40       	sbci	r19, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x74>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x7e>
 3f6:	00 00       	nop
		_delay_ms(200);
		_delay_ms(20);
		temp*=0.02;
 3f8:	2a e0       	ldi	r18, 0x0A	; 10
 3fa:	37 ed       	ldi	r19, 0xD7	; 215
 3fc:	43 ea       	ldi	r20, 0xA3	; 163
 3fe:	5c e3       	ldi	r21, 0x3C	; 60
 400:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__mulsf3>
		temp-=273.15;
 404:	23 e3       	ldi	r18, 0x33	; 51
 406:	33 e9       	ldi	r19, 0x93	; 147
 408:	48 e8       	ldi	r20, 0x88	; 136
 40a:	53 e4       	ldi	r21, 0x43	; 67
 40c:	0e 94 c8 02 	call	0x590	; 0x590 <__subsf3>
 410:	6b 01       	movw	r12, r22
 412:	7c 01       	movw	r14, r24
		temp*=100;
		lcd_command_(0x80);
 414:	80 e8       	ldi	r24, 0x80	; 128
 416:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
		lcd_string_("the temp= ");
 41a:	86 e6       	ldi	r24, 0x66	; 102
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_string_>
		lcd_command_(0xc0);
 422:	80 ec       	ldi	r24, 0xC0	; 192
 424:	0e 94 8f 00 	call	0x11e	; 0x11e <lcd_command_>
		convert(temp);
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	48 ec       	ldi	r20, 0xC8	; 200
 42e:	52 e4       	ldi	r21, 0x42	; 66
 430:	c7 01       	movw	r24, r14
 432:	b6 01       	movw	r22, r12
 434:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <__mulsf3>
 438:	0e 94 35 03 	call	0x66a	; 0x66a <__fixunssfsi>
 43c:	cb 01       	movw	r24, r22
 43e:	0e 94 20 01 	call	0x240	; 0x240 <convert>
 442:	c1 cf       	rjmp	.-126    	; 0x3c6 <main+0x4e>

00000444 <MLX90614_Init>:
 */ 
#include "mlx90614.h"
void MLX90614_Init(unsigned char BaudRate)
{
	
	TWBR=BaudRate;	// set Bit rate value
 444:	80 b9       	out	0x00, r24	; 0
	TWSR=(0<<TWPS1)|(0<<TWPS0);	//set prescalar value
 446:	11 b8       	out	0x01, r1	; 1
 448:	08 95       	ret

0000044a <mlx90614_write>:
	
	
}
void mlx90614_write(unsigned char slave_add,unsigned char command){
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	c8 2f       	mov	r28, r24
 450:	d6 2f       	mov	r29, r22
	i2c_start_condition();
 452:	0e 94 45 00 	call	0x8a	; 0x8a <i2c_start_condition>
 456:	8f e9       	ldi	r24, 0x9F	; 159
 458:	9f e0       	ldi	r25, 0x0F	; 15
 45a:	01 97       	sbiw	r24, 0x01	; 1
 45c:	f1 f7       	brne	.-4      	; 0x45a <mlx90614_write+0x10>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <mlx90614_write+0x16>
 460:	00 00       	nop
	_delay_ms(1);
	i2c_send_address_W(slave_add);
 462:	8c 2f       	mov	r24, r28
 464:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_send_address_W>
	toggle_bit_(PORTC,2);
 468:	85 b3       	in	r24, 0x15	; 21
 46a:	c4 e0       	ldi	r28, 0x04	; 4
 46c:	8c 27       	eor	r24, r28
 46e:	85 bb       	out	0x15, r24	; 21
 470:	9f ef       	ldi	r25, 0xFF	; 255
 472:	23 ec       	ldi	r18, 0xC3	; 195
 474:	89 e0       	ldi	r24, 0x09	; 9
 476:	91 50       	subi	r25, 0x01	; 1
 478:	20 40       	sbci	r18, 0x00	; 0
 47a:	80 40       	sbci	r24, 0x00	; 0
 47c:	e1 f7       	brne	.-8      	; 0x476 <mlx90614_write+0x2c>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <mlx90614_write+0x36>
 480:	00 00       	nop
 482:	8f e9       	ldi	r24, 0x9F	; 159
 484:	9f e0       	ldi	r25, 0x0F	; 15
 486:	01 97       	sbiw	r24, 0x01	; 1
 488:	f1 f7       	brne	.-4      	; 0x486 <mlx90614_write+0x3c>
 48a:	00 c0       	rjmp	.+0      	; 0x48c <mlx90614_write+0x42>
 48c:	00 00       	nop
	_delay_ms(200);
	_delay_ms(1);
	i2c_send_data(command);
 48e:	8d 2f       	mov	r24, r29
 490:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_send_data>
	toggle_bit_(PORTC,2);
 494:	85 b3       	in	r24, 0x15	; 21
 496:	8c 27       	eor	r24, r28
 498:	85 bb       	out	0x15, r24	; 21
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	23 ec       	ldi	r18, 0xC3	; 195
 49e:	89 e0       	ldi	r24, 0x09	; 9
 4a0:	91 50       	subi	r25, 0x01	; 1
 4a2:	20 40       	sbci	r18, 0x00	; 0
 4a4:	80 40       	sbci	r24, 0x00	; 0
 4a6:	e1 f7       	brne	.-8      	; 0x4a0 <mlx90614_write+0x56>
 4a8:	00 c0       	rjmp	.+0      	; 0x4aa <mlx90614_write+0x60>
 4aa:	00 00       	nop
 4ac:	8f e9       	ldi	r24, 0x9F	; 159
 4ae:	9f e0       	ldi	r25, 0x0F	; 15
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	f1 f7       	brne	.-4      	; 0x4b0 <mlx90614_write+0x66>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <mlx90614_write+0x6c>
 4b6:	00 00       	nop
	_delay_ms(200);
	_delay_ms(1);
	i2c_start_condition();
 4b8:	0e 94 45 00 	call	0x8a	; 0x8a <i2c_start_condition>
	toggle_bit_(PORTC,2);
 4bc:	85 b3       	in	r24, 0x15	; 21
 4be:	c8 27       	eor	r28, r24
 4c0:	c5 bb       	out	0x15, r28	; 21
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	23 ec       	ldi	r18, 0xC3	; 195
 4c6:	89 e0       	ldi	r24, 0x09	; 9
 4c8:	91 50       	subi	r25, 0x01	; 1
 4ca:	20 40       	sbci	r18, 0x00	; 0
 4cc:	80 40       	sbci	r24, 0x00	; 0
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <mlx90614_write+0x7e>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <mlx90614_write+0x88>
 4d2:	00 00       	nop
	_delay_ms(200);
	
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <mlx90614_read>:

double mlx90614_read(unsigned char slave_add,unsigned char command){
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	c8 2f       	mov	r28, r24
 4e0:	d6 2f       	mov	r29, r22
	double temp;
	unsigned char pec,data_low,data_high;
	i2c_start_condition();
 4e2:	0e 94 45 00 	call	0x8a	; 0x8a <i2c_start_condition>
 4e6:	8f e9       	ldi	r24, 0x9F	; 159
 4e8:	9f e0       	ldi	r25, 0x0F	; 15
 4ea:	01 97       	sbiw	r24, 0x01	; 1
 4ec:	f1 f7       	brne	.-4      	; 0x4ea <mlx90614_read+0x10>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <mlx90614_read+0x16>
 4f0:	00 00       	nop
	_delay_ms(1);
	i2c_send_address_W(slave_add|0x00);
 4f2:	8c 2f       	mov	r24, r28
 4f4:	0e 94 50 00 	call	0xa0	; 0xa0 <i2c_send_address_W>
 4f8:	8f e9       	ldi	r24, 0x9F	; 159
 4fa:	9f e0       	ldi	r25, 0x0F	; 15
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <mlx90614_read+0x22>
 500:	00 c0       	rjmp	.+0      	; 0x502 <mlx90614_read+0x28>
 502:	00 00       	nop
	_delay_ms(1);
	i2c_send_data(command);
 504:	8d 2f       	mov	r24, r29
 506:	0e 94 5c 00 	call	0xb8	; 0xb8 <i2c_send_data>
 50a:	8f e9       	ldi	r24, 0x9F	; 159
 50c:	9f e0       	ldi	r25, 0x0F	; 15
 50e:	01 97       	sbiw	r24, 0x01	; 1
 510:	f1 f7       	brne	.-4      	; 0x50e <mlx90614_read+0x34>
 512:	00 c0       	rjmp	.+0      	; 0x514 <mlx90614_read+0x3a>
 514:	00 00       	nop
	_delay_ms(1);
	i2c_repeat_start();
 516:	0e 94 68 00 	call	0xd0	; 0xd0 <i2c_repeat_start>
 51a:	8f e9       	ldi	r24, 0x9F	; 159
 51c:	9f e0       	ldi	r25, 0x0F	; 15
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <mlx90614_read+0x44>
 522:	00 c0       	rjmp	.+0      	; 0x524 <mlx90614_read+0x4a>
 524:	00 00       	nop
	_delay_ms(1);
	i2c_send_address_R(slave_add|0x01);
 526:	8c 2f       	mov	r24, r28
 528:	81 60       	ori	r24, 0x01	; 1
 52a:	0e 94 73 00 	call	0xe6	; 0xe6 <i2c_send_address_R>
 52e:	8f e9       	ldi	r24, 0x9F	; 159
 530:	9f e0       	ldi	r25, 0x0F	; 15
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <mlx90614_read+0x58>
 536:	00 c0       	rjmp	.+0      	; 0x538 <mlx90614_read+0x5e>
 538:	00 00       	nop
	_delay_ms(1);
	data_low=i2c_recieve_Data();
 53a:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_recieve_Data>
 53e:	d8 2f       	mov	r29, r24
 540:	8f e9       	ldi	r24, 0x9F	; 159
 542:	9f e0       	ldi	r25, 0x0F	; 15
 544:	01 97       	sbiw	r24, 0x01	; 1
 546:	f1 f7       	brne	.-4      	; 0x544 <mlx90614_read+0x6a>
 548:	00 c0       	rjmp	.+0      	; 0x54a <mlx90614_read+0x70>
 54a:	00 00       	nop
	_delay_ms(1);
	data_high=i2c_recieve_Data();
 54c:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_recieve_Data>
 550:	c8 2f       	mov	r28, r24
 552:	8f e9       	ldi	r24, 0x9F	; 159
 554:	9f e0       	ldi	r25, 0x0F	; 15
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <mlx90614_read+0x7c>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <mlx90614_read+0x82>
 55c:	00 00       	nop
	_delay_ms(1);
	pec=i2c_recieve_Data();
 55e:	0e 94 7f 00 	call	0xfe	; 0xfe <i2c_recieve_Data>
 562:	8f e9       	ldi	r24, 0x9F	; 159
 564:	9f e0       	ldi	r25, 0x0F	; 15
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <mlx90614_read+0x8c>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <mlx90614_read+0x92>
 56c:	00 00       	nop
	_delay_ms(1);
	i2c_stop_condition();
 56e:	0e 94 8b 00 	call	0x116	; 0x116 <i2c_stop_condition>
	temp=data_low;
	temp=((data_high<<8)+data_low);
	return temp;
 572:	6c 2f       	mov	r22, r28
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	76 2f       	mov	r23, r22
 578:	66 27       	eor	r22, r22
 57a:	6d 0f       	add	r22, r29
 57c:	71 1d       	adc	r23, r1
 57e:	07 2e       	mov	r0, r23
 580:	00 0c       	add	r0, r0
 582:	88 0b       	sbc	r24, r24
 584:	99 0b       	sbc	r25, r25
 586:	0e 94 66 03 	call	0x6cc	; 0x6cc <__floatsisf>
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <__subsf3>:
 590:	50 58       	subi	r21, 0x80	; 128

00000592 <__addsf3>:
 592:	bb 27       	eor	r27, r27
 594:	aa 27       	eor	r26, r26
 596:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__addsf3x>
 59a:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_round>
 59e:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_pscA>
 5a2:	38 f0       	brcs	.+14     	; 0x5b2 <__addsf3+0x20>
 5a4:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_pscB>
 5a8:	20 f0       	brcs	.+8      	; 0x5b2 <__addsf3+0x20>
 5aa:	39 f4       	brne	.+14     	; 0x5ba <__addsf3+0x28>
 5ac:	9f 3f       	cpi	r25, 0xFF	; 255
 5ae:	19 f4       	brne	.+6      	; 0x5b6 <__addsf3+0x24>
 5b0:	26 f4       	brtc	.+8      	; 0x5ba <__addsf3+0x28>
 5b2:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_nan>
 5b6:	0e f4       	brtc	.+2      	; 0x5ba <__addsf3+0x28>
 5b8:	e0 95       	com	r30
 5ba:	e7 fb       	bst	r30, 7
 5bc:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_inf>

000005c0 <__addsf3x>:
 5c0:	e9 2f       	mov	r30, r25
 5c2:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_split3>
 5c6:	58 f3       	brcs	.-42     	; 0x59e <__addsf3+0xc>
 5c8:	ba 17       	cp	r27, r26
 5ca:	62 07       	cpc	r22, r18
 5cc:	73 07       	cpc	r23, r19
 5ce:	84 07       	cpc	r24, r20
 5d0:	95 07       	cpc	r25, r21
 5d2:	20 f0       	brcs	.+8      	; 0x5dc <__addsf3x+0x1c>
 5d4:	79 f4       	brne	.+30     	; 0x5f4 <__addsf3x+0x34>
 5d6:	a6 f5       	brtc	.+104    	; 0x640 <__addsf3x+0x80>
 5d8:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_zero>
 5dc:	0e f4       	brtc	.+2      	; 0x5e0 <__addsf3x+0x20>
 5de:	e0 95       	com	r30
 5e0:	0b 2e       	mov	r0, r27
 5e2:	ba 2f       	mov	r27, r26
 5e4:	a0 2d       	mov	r26, r0
 5e6:	0b 01       	movw	r0, r22
 5e8:	b9 01       	movw	r22, r18
 5ea:	90 01       	movw	r18, r0
 5ec:	0c 01       	movw	r0, r24
 5ee:	ca 01       	movw	r24, r20
 5f0:	a0 01       	movw	r20, r0
 5f2:	11 24       	eor	r1, r1
 5f4:	ff 27       	eor	r31, r31
 5f6:	59 1b       	sub	r21, r25
 5f8:	99 f0       	breq	.+38     	; 0x620 <__addsf3x+0x60>
 5fa:	59 3f       	cpi	r21, 0xF9	; 249
 5fc:	50 f4       	brcc	.+20     	; 0x612 <__addsf3x+0x52>
 5fe:	50 3e       	cpi	r21, 0xE0	; 224
 600:	68 f1       	brcs	.+90     	; 0x65c <__addsf3x+0x9c>
 602:	1a 16       	cp	r1, r26
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	a2 2f       	mov	r26, r18
 608:	23 2f       	mov	r18, r19
 60a:	34 2f       	mov	r19, r20
 60c:	44 27       	eor	r20, r20
 60e:	58 5f       	subi	r21, 0xF8	; 248
 610:	f3 cf       	rjmp	.-26     	; 0x5f8 <__addsf3x+0x38>
 612:	46 95       	lsr	r20
 614:	37 95       	ror	r19
 616:	27 95       	ror	r18
 618:	a7 95       	ror	r26
 61a:	f0 40       	sbci	r31, 0x00	; 0
 61c:	53 95       	inc	r21
 61e:	c9 f7       	brne	.-14     	; 0x612 <__addsf3x+0x52>
 620:	7e f4       	brtc	.+30     	; 0x640 <__addsf3x+0x80>
 622:	1f 16       	cp	r1, r31
 624:	ba 0b       	sbc	r27, r26
 626:	62 0b       	sbc	r22, r18
 628:	73 0b       	sbc	r23, r19
 62a:	84 0b       	sbc	r24, r20
 62c:	ba f0       	brmi	.+46     	; 0x65c <__addsf3x+0x9c>
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	a1 f0       	breq	.+40     	; 0x65a <__addsf3x+0x9a>
 632:	ff 0f       	add	r31, r31
 634:	bb 1f       	adc	r27, r27
 636:	66 1f       	adc	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	88 1f       	adc	r24, r24
 63c:	c2 f7       	brpl	.-16     	; 0x62e <__addsf3x+0x6e>
 63e:	0e c0       	rjmp	.+28     	; 0x65c <__addsf3x+0x9c>
 640:	ba 0f       	add	r27, r26
 642:	62 1f       	adc	r22, r18
 644:	73 1f       	adc	r23, r19
 646:	84 1f       	adc	r24, r20
 648:	48 f4       	brcc	.+18     	; 0x65c <__addsf3x+0x9c>
 64a:	87 95       	ror	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	9e 3f       	cpi	r25, 0xFE	; 254
 656:	08 f0       	brcs	.+2      	; 0x65a <__addsf3x+0x9a>
 658:	b0 cf       	rjmp	.-160    	; 0x5ba <__addsf3+0x28>
 65a:	93 95       	inc	r25
 65c:	88 0f       	add	r24, r24
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0xa2>
 660:	99 27       	eor	r25, r25
 662:	ee 0f       	add	r30, r30
 664:	97 95       	ror	r25
 666:	87 95       	ror	r24
 668:	08 95       	ret

0000066a <__fixunssfsi>:
 66a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fp_splitA>
 66e:	88 f0       	brcs	.+34     	; 0x692 <__fixunssfsi+0x28>
 670:	9f 57       	subi	r25, 0x7F	; 127
 672:	98 f0       	brcs	.+38     	; 0x69a <__fixunssfsi+0x30>
 674:	b9 2f       	mov	r27, r25
 676:	99 27       	eor	r25, r25
 678:	b7 51       	subi	r27, 0x17	; 23
 67a:	b0 f0       	brcs	.+44     	; 0x6a8 <__fixunssfsi+0x3e>
 67c:	e1 f0       	breq	.+56     	; 0x6b6 <__fixunssfsi+0x4c>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	88 1f       	adc	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	1a f0       	brmi	.+6      	; 0x68e <__fixunssfsi+0x24>
 688:	ba 95       	dec	r27
 68a:	c9 f7       	brne	.-14     	; 0x67e <__fixunssfsi+0x14>
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <__fixunssfsi+0x4c>
 68e:	b1 30       	cpi	r27, 0x01	; 1
 690:	91 f0       	breq	.+36     	; 0x6b6 <__fixunssfsi+0x4c>
 692:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fp_zero>
 696:	b1 e0       	ldi	r27, 0x01	; 1
 698:	08 95       	ret
 69a:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__fp_zero>
 69e:	67 2f       	mov	r22, r23
 6a0:	78 2f       	mov	r23, r24
 6a2:	88 27       	eor	r24, r24
 6a4:	b8 5f       	subi	r27, 0xF8	; 248
 6a6:	39 f0       	breq	.+14     	; 0x6b6 <__fixunssfsi+0x4c>
 6a8:	b9 3f       	cpi	r27, 0xF9	; 249
 6aa:	cc f3       	brlt	.-14     	; 0x69e <__fixunssfsi+0x34>
 6ac:	86 95       	lsr	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b3 95       	inc	r27
 6b4:	d9 f7       	brne	.-10     	; 0x6ac <__fixunssfsi+0x42>
 6b6:	3e f4       	brtc	.+14     	; 0x6c6 <__fixunssfsi+0x5c>
 6b8:	90 95       	com	r25
 6ba:	80 95       	com	r24
 6bc:	70 95       	com	r23
 6be:	61 95       	neg	r22
 6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 6c2:	8f 4f       	sbci	r24, 0xFF	; 255
 6c4:	9f 4f       	sbci	r25, 0xFF	; 255
 6c6:	08 95       	ret

000006c8 <__floatunsisf>:
 6c8:	e8 94       	clt
 6ca:	09 c0       	rjmp	.+18     	; 0x6de <__floatsisf+0x12>

000006cc <__floatsisf>:
 6cc:	97 fb       	bst	r25, 7
 6ce:	3e f4       	brtc	.+14     	; 0x6de <__floatsisf+0x12>
 6d0:	90 95       	com	r25
 6d2:	80 95       	com	r24
 6d4:	70 95       	com	r23
 6d6:	61 95       	neg	r22
 6d8:	7f 4f       	sbci	r23, 0xFF	; 255
 6da:	8f 4f       	sbci	r24, 0xFF	; 255
 6dc:	9f 4f       	sbci	r25, 0xFF	; 255
 6de:	99 23       	and	r25, r25
 6e0:	a9 f0       	breq	.+42     	; 0x70c <__floatsisf+0x40>
 6e2:	f9 2f       	mov	r31, r25
 6e4:	96 e9       	ldi	r25, 0x96	; 150
 6e6:	bb 27       	eor	r27, r27
 6e8:	93 95       	inc	r25
 6ea:	f6 95       	lsr	r31
 6ec:	87 95       	ror	r24
 6ee:	77 95       	ror	r23
 6f0:	67 95       	ror	r22
 6f2:	b7 95       	ror	r27
 6f4:	f1 11       	cpse	r31, r1
 6f6:	f8 cf       	rjmp	.-16     	; 0x6e8 <__floatsisf+0x1c>
 6f8:	fa f4       	brpl	.+62     	; 0x738 <__floatsisf+0x6c>
 6fa:	bb 0f       	add	r27, r27
 6fc:	11 f4       	brne	.+4      	; 0x702 <__floatsisf+0x36>
 6fe:	60 ff       	sbrs	r22, 0
 700:	1b c0       	rjmp	.+54     	; 0x738 <__floatsisf+0x6c>
 702:	6f 5f       	subi	r22, 0xFF	; 255
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	8f 4f       	sbci	r24, 0xFF	; 255
 708:	9f 4f       	sbci	r25, 0xFF	; 255
 70a:	16 c0       	rjmp	.+44     	; 0x738 <__floatsisf+0x6c>
 70c:	88 23       	and	r24, r24
 70e:	11 f0       	breq	.+4      	; 0x714 <__floatsisf+0x48>
 710:	96 e9       	ldi	r25, 0x96	; 150
 712:	11 c0       	rjmp	.+34     	; 0x736 <__floatsisf+0x6a>
 714:	77 23       	and	r23, r23
 716:	21 f0       	breq	.+8      	; 0x720 <__floatsisf+0x54>
 718:	9e e8       	ldi	r25, 0x8E	; 142
 71a:	87 2f       	mov	r24, r23
 71c:	76 2f       	mov	r23, r22
 71e:	05 c0       	rjmp	.+10     	; 0x72a <__floatsisf+0x5e>
 720:	66 23       	and	r22, r22
 722:	71 f0       	breq	.+28     	; 0x740 <__floatsisf+0x74>
 724:	96 e8       	ldi	r25, 0x86	; 134
 726:	86 2f       	mov	r24, r22
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	60 e0       	ldi	r22, 0x00	; 0
 72c:	2a f0       	brmi	.+10     	; 0x738 <__floatsisf+0x6c>
 72e:	9a 95       	dec	r25
 730:	66 0f       	add	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	da f7       	brpl	.-10     	; 0x72e <__floatsisf+0x62>
 738:	88 0f       	add	r24, r24
 73a:	96 95       	lsr	r25
 73c:	87 95       	ror	r24
 73e:	97 f9       	bld	r25, 7
 740:	08 95       	ret

00000742 <__fp_inf>:
 742:	97 f9       	bld	r25, 7
 744:	9f 67       	ori	r25, 0x7F	; 127
 746:	80 e8       	ldi	r24, 0x80	; 128
 748:	70 e0       	ldi	r23, 0x00	; 0
 74a:	60 e0       	ldi	r22, 0x00	; 0
 74c:	08 95       	ret

0000074e <__fp_nan>:
 74e:	9f ef       	ldi	r25, 0xFF	; 255
 750:	80 ec       	ldi	r24, 0xC0	; 192
 752:	08 95       	ret

00000754 <__fp_pscA>:
 754:	00 24       	eor	r0, r0
 756:	0a 94       	dec	r0
 758:	16 16       	cp	r1, r22
 75a:	17 06       	cpc	r1, r23
 75c:	18 06       	cpc	r1, r24
 75e:	09 06       	cpc	r0, r25
 760:	08 95       	ret

00000762 <__fp_pscB>:
 762:	00 24       	eor	r0, r0
 764:	0a 94       	dec	r0
 766:	12 16       	cp	r1, r18
 768:	13 06       	cpc	r1, r19
 76a:	14 06       	cpc	r1, r20
 76c:	05 06       	cpc	r0, r21
 76e:	08 95       	ret

00000770 <__fp_round>:
 770:	09 2e       	mov	r0, r25
 772:	03 94       	inc	r0
 774:	00 0c       	add	r0, r0
 776:	11 f4       	brne	.+4      	; 0x77c <__fp_round+0xc>
 778:	88 23       	and	r24, r24
 77a:	52 f0       	brmi	.+20     	; 0x790 <__fp_round+0x20>
 77c:	bb 0f       	add	r27, r27
 77e:	40 f4       	brcc	.+16     	; 0x790 <__fp_round+0x20>
 780:	bf 2b       	or	r27, r31
 782:	11 f4       	brne	.+4      	; 0x788 <__fp_round+0x18>
 784:	60 ff       	sbrs	r22, 0
 786:	04 c0       	rjmp	.+8      	; 0x790 <__fp_round+0x20>
 788:	6f 5f       	subi	r22, 0xFF	; 255
 78a:	7f 4f       	sbci	r23, 0xFF	; 255
 78c:	8f 4f       	sbci	r24, 0xFF	; 255
 78e:	9f 4f       	sbci	r25, 0xFF	; 255
 790:	08 95       	ret

00000792 <__fp_split3>:
 792:	57 fd       	sbrc	r21, 7
 794:	90 58       	subi	r25, 0x80	; 128
 796:	44 0f       	add	r20, r20
 798:	55 1f       	adc	r21, r21
 79a:	59 f0       	breq	.+22     	; 0x7b2 <__fp_splitA+0x10>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	71 f0       	breq	.+28     	; 0x7bc <__fp_splitA+0x1a>
 7a0:	47 95       	ror	r20

000007a2 <__fp_splitA>:
 7a2:	88 0f       	add	r24, r24
 7a4:	97 fb       	bst	r25, 7
 7a6:	99 1f       	adc	r25, r25
 7a8:	61 f0       	breq	.+24     	; 0x7c2 <__fp_splitA+0x20>
 7aa:	9f 3f       	cpi	r25, 0xFF	; 255
 7ac:	79 f0       	breq	.+30     	; 0x7cc <__fp_splitA+0x2a>
 7ae:	87 95       	ror	r24
 7b0:	08 95       	ret
 7b2:	12 16       	cp	r1, r18
 7b4:	13 06       	cpc	r1, r19
 7b6:	14 06       	cpc	r1, r20
 7b8:	55 1f       	adc	r21, r21
 7ba:	f2 cf       	rjmp	.-28     	; 0x7a0 <__fp_split3+0xe>
 7bc:	46 95       	lsr	r20
 7be:	f1 df       	rcall	.-30     	; 0x7a2 <__fp_splitA>
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <__fp_splitA+0x30>
 7c2:	16 16       	cp	r1, r22
 7c4:	17 06       	cpc	r1, r23
 7c6:	18 06       	cpc	r1, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	f1 cf       	rjmp	.-30     	; 0x7ae <__fp_splitA+0xc>
 7cc:	86 95       	lsr	r24
 7ce:	71 05       	cpc	r23, r1
 7d0:	61 05       	cpc	r22, r1
 7d2:	08 94       	sec
 7d4:	08 95       	ret

000007d6 <__fp_zero>:
 7d6:	e8 94       	clt

000007d8 <__fp_szero>:
 7d8:	bb 27       	eor	r27, r27
 7da:	66 27       	eor	r22, r22
 7dc:	77 27       	eor	r23, r23
 7de:	cb 01       	movw	r24, r22
 7e0:	97 f9       	bld	r25, 7
 7e2:	08 95       	ret

000007e4 <__mulsf3>:
 7e4:	0e 94 05 04 	call	0x80a	; 0x80a <__mulsf3x>
 7e8:	0c 94 b8 03 	jmp	0x770	; 0x770 <__fp_round>
 7ec:	0e 94 aa 03 	call	0x754	; 0x754 <__fp_pscA>
 7f0:	38 f0       	brcs	.+14     	; 0x800 <__mulsf3+0x1c>
 7f2:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_pscB>
 7f6:	20 f0       	brcs	.+8      	; 0x800 <__mulsf3+0x1c>
 7f8:	95 23       	and	r25, r21
 7fa:	11 f0       	breq	.+4      	; 0x800 <__mulsf3+0x1c>
 7fc:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_inf>
 800:	0c 94 a7 03 	jmp	0x74e	; 0x74e <__fp_nan>
 804:	11 24       	eor	r1, r1
 806:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_szero>

0000080a <__mulsf3x>:
 80a:	0e 94 c9 03 	call	0x792	; 0x792 <__fp_split3>
 80e:	70 f3       	brcs	.-36     	; 0x7ec <__mulsf3+0x8>

00000810 <__mulsf3_pse>:
 810:	95 9f       	mul	r25, r21
 812:	c1 f3       	breq	.-16     	; 0x804 <__mulsf3+0x20>
 814:	95 0f       	add	r25, r21
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	55 1f       	adc	r21, r21
 81a:	62 9f       	mul	r22, r18
 81c:	f0 01       	movw	r30, r0
 81e:	72 9f       	mul	r23, r18
 820:	bb 27       	eor	r27, r27
 822:	f0 0d       	add	r31, r0
 824:	b1 1d       	adc	r27, r1
 826:	63 9f       	mul	r22, r19
 828:	aa 27       	eor	r26, r26
 82a:	f0 0d       	add	r31, r0
 82c:	b1 1d       	adc	r27, r1
 82e:	aa 1f       	adc	r26, r26
 830:	64 9f       	mul	r22, r20
 832:	66 27       	eor	r22, r22
 834:	b0 0d       	add	r27, r0
 836:	a1 1d       	adc	r26, r1
 838:	66 1f       	adc	r22, r22
 83a:	82 9f       	mul	r24, r18
 83c:	22 27       	eor	r18, r18
 83e:	b0 0d       	add	r27, r0
 840:	a1 1d       	adc	r26, r1
 842:	62 1f       	adc	r22, r18
 844:	73 9f       	mul	r23, r19
 846:	b0 0d       	add	r27, r0
 848:	a1 1d       	adc	r26, r1
 84a:	62 1f       	adc	r22, r18
 84c:	83 9f       	mul	r24, r19
 84e:	a0 0d       	add	r26, r0
 850:	61 1d       	adc	r22, r1
 852:	22 1f       	adc	r18, r18
 854:	74 9f       	mul	r23, r20
 856:	33 27       	eor	r19, r19
 858:	a0 0d       	add	r26, r0
 85a:	61 1d       	adc	r22, r1
 85c:	23 1f       	adc	r18, r19
 85e:	84 9f       	mul	r24, r20
 860:	60 0d       	add	r22, r0
 862:	21 1d       	adc	r18, r1
 864:	82 2f       	mov	r24, r18
 866:	76 2f       	mov	r23, r22
 868:	6a 2f       	mov	r22, r26
 86a:	11 24       	eor	r1, r1
 86c:	9f 57       	subi	r25, 0x7F	; 127
 86e:	50 40       	sbci	r21, 0x00	; 0
 870:	9a f0       	brmi	.+38     	; 0x898 <__stack+0x39>
 872:	f1 f0       	breq	.+60     	; 0x8b0 <__stack+0x51>
 874:	88 23       	and	r24, r24
 876:	4a f0       	brmi	.+18     	; 0x88a <__stack+0x2b>
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	bb 1f       	adc	r27, r27
 87e:	66 1f       	adc	r22, r22
 880:	77 1f       	adc	r23, r23
 882:	88 1f       	adc	r24, r24
 884:	91 50       	subi	r25, 0x01	; 1
 886:	50 40       	sbci	r21, 0x00	; 0
 888:	a9 f7       	brne	.-22     	; 0x874 <__stack+0x15>
 88a:	9e 3f       	cpi	r25, 0xFE	; 254
 88c:	51 05       	cpc	r21, r1
 88e:	80 f0       	brcs	.+32     	; 0x8b0 <__stack+0x51>
 890:	0c 94 a1 03 	jmp	0x742	; 0x742 <__fp_inf>
 894:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_szero>
 898:	5f 3f       	cpi	r21, 0xFF	; 255
 89a:	e4 f3       	brlt	.-8      	; 0x894 <__stack+0x35>
 89c:	98 3e       	cpi	r25, 0xE8	; 232
 89e:	d4 f3       	brlt	.-12     	; 0x894 <__stack+0x35>
 8a0:	86 95       	lsr	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b7 95       	ror	r27
 8a8:	f7 95       	ror	r31
 8aa:	e7 95       	ror	r30
 8ac:	9f 5f       	subi	r25, 0xFF	; 255
 8ae:	c1 f7       	brne	.-16     	; 0x8a0 <__stack+0x41>
 8b0:	fe 2b       	or	r31, r30
 8b2:	88 0f       	add	r24, r24
 8b4:	91 1d       	adc	r25, r1
 8b6:	96 95       	lsr	r25
 8b8:	87 95       	ror	r24
 8ba:	97 f9       	bld	r25, 7
 8bc:	08 95       	ret

000008be <__umulhisi3>:
 8be:	a2 9f       	mul	r26, r18
 8c0:	b0 01       	movw	r22, r0
 8c2:	b3 9f       	mul	r27, r19
 8c4:	c0 01       	movw	r24, r0
 8c6:	a3 9f       	mul	r26, r19
 8c8:	70 0d       	add	r23, r0
 8ca:	81 1d       	adc	r24, r1
 8cc:	11 24       	eor	r1, r1
 8ce:	91 1d       	adc	r25, r1
 8d0:	b2 9f       	mul	r27, r18
 8d2:	70 0d       	add	r23, r0
 8d4:	81 1d       	adc	r24, r1
 8d6:	11 24       	eor	r1, r1
 8d8:	91 1d       	adc	r25, r1
 8da:	08 95       	ret

000008dc <_exit>:
 8dc:	f8 94       	cli

000008de <__stop_program>:
 8de:	ff cf       	rjmp	.-2      	; 0x8de <__stop_program>
